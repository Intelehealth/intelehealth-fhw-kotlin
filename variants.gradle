android {

    productFlavors.each { flavor ->
        if (flavor.hasProperty('appId') && isApplicationModule()) {
            flavor.applicationId = flavor.appId
            flavor.versionCode = flavor.vCode
            flavor.versionName = flavor.vName
        }
    }

    if (isApplicationModule()) {
        applicationVariants.configureEach { variant -> // 3
            configureVariantFields(variant)
        }
    } else {
        androidComponents {
            libraryVariants.configureEach { variant ->
                configureVariantFields(variant)
            }
        }
    }
}

def configureVariantFields(variant) {
    def name = variant.name
    def domain

    if (name.contains("ida")) {
        domain = "IDA"
    } else if (name.contains("namma")) {
        domain = "NAMMA"
    } else if (name.contains("kf")) {
        domain = "KF"
    } else if (name.contains("biocon")) {
        domain = "BIOCON"
    } else if (name.contains("bmgf")) {
        domain = "BMGF"
    } else if (name.contains("nas")) {
        domain = "NAS"
    } else if (name.contains("unicef")) {
        domain = "UNICEF"
    } else if (name.contains("kcdo")) {
        domain = "KCDO"
    } else if (name.contains("unfpa")) {
        domain = "UNFPA"
    } else {
        domain = "IDA"
    }

    // Specific values
    if (name.contains("Dev")) {
        domain = domain.concat("_").concat("DEV")
    } else if (name.contains("Staging")) {
        domain = domain.concat("_").concat("STAGE")
    } else if (name.contains("Production")) {
        domain = domain.concat("_").concat("PROD")
    }

    buildVariantConfigField(domain, variant)
}

def isApplicationModule() { // 4
    return project.android.class.simpleName.startsWith('BaseAppModuleExtension')
}

// Generating different type of endpoint base on selected variant or app
def buildVariantConfigField(clientServer, variant) {
    clientServer = clientServer.concat("_")
    def serverUrl = "SERVER_URL"
    def realTimeFbUrl = "REAL_TIME_FB_URL"
    def liveKitUrl = "LIVE_KIT_URL"
    def socketUrl = "SOCKET_URL"
    def fbRtDb = "FB_RT_INSTANCE"

    def endPointPropertyFile = file("${rootProject.projectDir}/endpoint.properties")
    def property = new Properties()

    if (endPointPropertyFile.canRead()) {
        property.load(new FileInputStream(endPointPropertyFile))
    }

    def buildServerUrl = property[clientServer + serverUrl].toString()
    def buildRealTimeFbUrl = property[clientServer + realTimeFbUrl].toString()
    def buildLiveKitUrl = property[clientServer + liveKitUrl].toString()
    def buildSocketUrl = property[clientServer + socketUrl].toString()
    def buildFbRtDb = property[clientServer + fbRtDb].toString()

    variant.buildConfigField "String", serverUrl, buildServerUrl
    variant.buildConfigField "String", realTimeFbUrl, buildRealTimeFbUrl
    variant.buildConfigField 'String', liveKitUrl, buildLiveKitUrl
    variant.buildConfigField 'String', socketUrl, buildSocketUrl
    variant.buildConfigField 'String', fbRtDb, buildFbRtDb
}